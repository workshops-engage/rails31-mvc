.step.slide#controllers-scaffold[data-x=x_succ data-y=0]
  q
    span Controles 
    small scaffold

.step.slide.shell[data-x=x_succ data-y=0]
  q
    pre
      | rails g scaffold Project \
          title:string \
          client:string \
          start:date \
          hours:integer \
          team:text

.step.slide[data-x=x_succ data-y=0]
  q
    div Scaffold
    div is...

.step.slide[data-x=x_succ data-y=0]
  h1[style="font-size:12em; color: red; line-height: 1.5em"] BAD

.step.slide[data-x=x_succ data-y=0 style="font-size:3em; line-height: 1.7em"]
  ul
    li Se você não entende o que ele faz.
    li Se sua app só tem scaffolds, você está fazendo um admin. Olhe o <a href="#TODO">active_admin</a>.
    li Muitos scaffold: Não segue o princípio DRY. OO para o resgate. Veja o <a href="#TODO">inherited_resources</a>.

    
.step.slide.shell[data-x=x_succ data-y=0]
  q
    pre
      | rails g scaffold Session \
          email:string \
          password:string

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.65em; line-height: 1.6em"]
        | YourApp::Application.routes.draw do
            resources :sessions,
              only: %w[new create destroy]
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.45em; line-height: 1.8em"]
        |
          class SessionsControllerTest < ActionController::TestCase
            setup do
              @client = Client.create
                name: "John",
                email: "john@gmail.com",
                password: 'tre543%$#',
                password_confirmation: 'tre543%$#'
            end
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.5em; line-height: 1.8em"]
        | test "should get new" do
            get :new
            assert_response :success
            assert_select "form" do
              assert_select "[action=?]", sessions_path
              assert_select "input[name=?]", "client[email]"
              assert_select "input[name=?]", "client[password]"
              assert_select "input[type=submit]"
            end
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.5em; line-height: 1.6em"]
        | class SessionsController < ApplicationController
            def new
              @client = Client.new
            end
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="xml" style="font-size:0.5em; line-height: 1.4em"]
        |
          &lt;h1>Sign in&lt;/h1>
          &lt;div style="color:red"><%= flash[:notice] %>&lt;/div>
          <%= form_for(@client, url: sessions_path) do |f| %>
            &lt;div class="field">
              <%= f.label :email %>&lt;br />
              <%= f.text_field :email %>
            &lt;/div>
            &lt;div class="field">
              <%= f.label :password %>&lt;br />
              <%= f.text_field :password %>
            &lt;/div>
            &lt;div class="actions">
              <%= f.submit "Autenticar" %>
            &lt;/div>
          <% end %>

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.65em; line-height: 1.6em"]
        |
          test "should fail" do
            post :create, client: {email: "wrong",
              password: "wrong"}
            assert_redirected_to new_session_path
            assert_equal flash[:notice],
              "Usuário ou senha inválidos"
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.6em; line-height: 1.6em"]
        |
          test "should succeed" do
            post :create, client: {
              email: "john@gmail.com",
              password: "tre543%$#"
            }
            assert_redirected_to root_path
            assert_equal session[:client_id], @client.id
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.65em; line-height: 1.6em"]
        | def create
            @client = Client.auth(params[:client])
            if @client
              session[:client_id] = @client.id
              return redirect_to root_path
            else
              return redirect_to new_session_path,
                notice: "Usuário ou senha inválidos"
            end
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.45em; line-height: 1.6em"]
        |
          class ClientTest < ActiveSupport::TestCase
            test "auth" do
              create_client
              assert_equal nil, Client.auth(email: "wrong",
                password: 'wrong')
              assert_equal nil, Client.auth(email: "john@gmail.com",
                password: 'wrong')
              assert_equal nil, Client.auth(email: "wrong",
                password: 'tre543%$#')
              assert_equal @client, Client.auth(email: "john@gmail.com", 
                password: 'tre543%$#')
            end
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.75em; line-height: 1.6em"]
        | class Client < ActiveRecord::Base
            def self.auth data
              find_by_email_and_password 
                data[:email], data[:password]
            end
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.55em; line-height: 1.6em"]
        | #app controller
          helper_method :current_order
          def current_order
            @current_order ||=
              current_client.orders.find(session[:order_id])
          rescue => e
            @current_order = current_client.orders.create
            session[:order_id] = @current_order.id
            @current_order
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.65em; line-height: 1.6em"]
        | YourApp::Application.routes.draw do
            resources :order_items,
              only: %w[create destroy]
          end


.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.45em; line-height: 1.6em"]
        |
          class OrderItemsControllerTest < ActionController::TestCase
            setup do
              @client = Client.create
                name: "John",
                email: "john@gmail.com",
                password: 'tre543%$#',
                password_confirmation: 'tre543%$#'
              @order = @client.orders.create
              @product = Product.create name: 'Xaxá', price: 0.2
              session[:client_id] = @client.id
              session[:order_id] = @order.id
            end
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.6em; line-height: 1.4em"]
        | test "should create order_item" do
            assert_difference('OrderItem.count') do
              post :create, order_item: {
                product_id: @product.id,
                quantity: 1
              }
            end

            assert_redirected_to order_path(@order)
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.5em; line-height: 1.4em"]
        | test "should update order_item" do
            @order.order_items.create product: @product,
              quantity: 1
            assert_no_difference('OrderItem.count') do
              post :create, order_item: {
                product_id: @product.id, 
                quantity: 10
              }
            end

            assert_redirected_to order_path(@order)
            assert_equal 10, @order.order_items.first.quantity
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.45em; line-height: 1.4em"]
        | class OrderItemsController < ApplicationController
            def create
              @order_item = current_order.order_items.
                find_by_product_id(params[:order_item][:product_id])
              if @order_item
                @order_item.update_attributes(params[:order_item])
                notice = 'Produto atualizado com sucesso.'
              else
                current_order.order_items.create(params[:order_item])
                notice = 'Produto incluído com sucesso.'
              end

              redirect_to current_order, notice: notice
            end
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.65em; line-height: 1.6em"]
        | YourApp::Application.routes.draw do
            resources :orders,
              only: %w[show destroy]
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.45em; line-height: 1.5em"]
        | class OrdersControllerTest < ActionController::TestCase
            setup do
              @client = Client.create name: "John",
                email: "john@gmail.com",
                password: 'tre543%$#',
                password_confirmation: 'tre543%$#'
              @order = @client.orders.create
              @xaxa = Product.create name: 'Xaxá', price: 0.2
              @soft = Product.create name: 'Soft', price: 0.3
              @order.order_items.create product: @xaxa, quantity: 1
              @order.order_items.create product: @soft, quantity: 1
              session[:client_id] = @client.id
              session[:order_id] = @order.id
            end
          end
.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.35em; line-height: 1.2em"]
        | test "should get show" do
            get :show
            assert_response :success
            assert_select "table#items" do
              assert_select "thead"
              assert_select "tbody" do
                assert_select "tr" do
                  assert_select "td", "Xaxá"
                  assert_select "td", "1"
                  assert_select "td", /0\.2/
                end
                assert_select "tr" do
                  assert_select "td", "Soft"
                  assert_select "td", "1"
                  assert_select "td", /0\.3/
                end
              end
              assert_select "tfoot" do
                assert_select "tr" do
                  assert_select "td", /0\.5/
                end        
              end
            end
          end
.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.55em; line-height: 1.6em"]
        |
          class OrdersController < ApplicationController
            def show
            end
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="xml" style="font-size:0.33em; line-height: 1.3em"]
        |
          &lt;h1>Meu pedido&lt;/h1>
          <%= link_to "Voltar para a loja", root_path %>
          <%= flash[:notice] %>
          &lt;table id="items" border="1">
            &lt;tr&lt;
              &lt;th>&lt;/th>
              &lt;th>Produto&lt;/th>
              &lt;th>$&lt;/th>
              &lt;th>Qtd&lt;/th>
              &lt;th>Total&lt;/th>
            &lt;/tr>
            <% for item in current_order.order_items %>
              &lt;tr>
                &lt;td><%= link_to "excluir", item, method: :delete, style: "color:red" %>&lt;/td>
                &lt;td><%= item.product.name %>&lt;/td>
                &lt;td><%= number_to_currency item.price %>&lt;/td>
                &lt;td><%= item.quantity %>&lt;/td>
                &lt;td><%= number_to_currency item.total %>&lt;/td>
              &lt;/tr>
            <% end %>
            &lt;tr>
              &lt;td colspan="4">&lt;/td>
              &lt;td><%= number_to_currency current_order.total %>&lt;/td>
            &lt;/tr>
          &lt;/table>

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.5em; line-height: 1.8em"]
        | 
          #test/functional/order_items_controller_test.rb
          test "should destroy order_item" do
            @order_item = @order.order_items.create 
              product: @product, quantity: 1
            assert_difference('OrderItem.count', -1) do
              delete :destroy, id: @order_item.to_param
            end

            assert_redirected_to order_path(@order)
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.5em; line-height: 1.6em"]
        |
          class OrderItemsController < ApplicationController
            def destroy
              @order_item = current_order.
                order_items.find(params[:id])
              @order_item.destroy

              redirect_to current_order,
                notice: 'Produto excluído com sucesso.'
            end
          end
